{"version":3,"sources":["components/Table.js","components/Menu.js","components/Edit.js","components/MainController.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tableData","_this2","params","URLSearchParams","append","table","fetch","method","body","then","response","json","data","setState","catch","err","pos0","keys","col","push","react_default","a","createElement","className","border","map","key","row","btn","console","log","refs","Component","Menu","that","listOfPages","page","classDescription","length","Link","to","MainController","products","BrowserRouter","src_components_Menu","tables","appChangePage","currTable","Route","path","render","src_components_Table","isAuthed","App","components_MainController","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b45fe232.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Table.css'\r\n\r\nclass Table extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {tableData:[]}\r\n    }\r\n\r\n    componentDidMount(){\r\n        var params = new URLSearchParams();\r\n        params.append('table', this.props.table);\r\n        fetch('/gettable', {\r\n            method:\"POST\",\r\n            body:params\r\n        })\r\n        .then((response) => {\r\n            return response.json()\r\n            \r\n        })\r\n        .then(data => {\r\n            this.setState({tableData:data})\r\n        })\r\n        .catch(err => {})\r\n    }\r\n\r\n    render(){\r\n        var pos0 = this.state.tableData[0];\r\n        var keys = [];\r\n        for(var col in pos0){\r\n            keys.push(col);\r\n        }\r\n        \r\n        return(\r\n            <div>\r\n                <div className=\"t\">\r\n                    <table border=\"1px\">\r\n                        <tbody>\r\n                        <tr>\r\n                            {keys.map((key) => <th>{key}</th>)}\r\n                        </tr>\r\n                        {this.state.tableData.map((row) => \r\n                            <tr >{keys.map((key) => {\r\n                                if (typeof row[key] !== 'object')\r\n                                return <td>{row[key]}</td>\r\n                                else{\r\n                                    return <td>object</td>\r\n                                }\r\n                            }\r\n                                // <td>{JSON.stringify(row[key])}</td>\r\n                            )}\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    sendEdited(btn) {\r\n        debugger;\r\n        console.log(this.refs);\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\nimport './Menu.css';\r\nimport { BrowserRouter as Router, Route, Redirect,Link } from \"react-router-dom\";\r\n\r\n\r\nclass Menu extends Component {\r\n\r\n  render() {\r\n    var that = this; \r\n\r\n    return (\r\n      <div className=\"row\">\r\n      \r\n        {this.props.listOfPages.map(function (page) { \r\n\r\n          var classDescription = \"menu-item\";\r\n          if (that.props.listOfPages.length > 4) {\r\n            classDescription += \" col-sm-2\";\r\n          }\r\n          else {\r\n            classDescription += \" col-sm-3\";\r\n          }\r\n\r\n          // if (that.props.page == page) {\r\n          //   classDescription += \" active\";\r\n          // }\r\n\r\n          return (<Link\r\n            className={classDescription} to={page}>{page}</Link>)\r\n        })\r\n        }\r\n        {/* <Link\r\n            className=\"menu-item\" to=\"/edit\">Edit</Link> */}\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\nimport './Edit.css';\r\n\r\nclass Edit extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {cols: []};\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {/* {this.props.listOfPages.map(currPage => {\r\n                    return <div>\r\n                        <h1>currPage</h1>\r\n                        <form action={\"/\" + currPage} method=\"post\">\r\n                            {this.state.cols.map(col => <input placeholder={col} name={col} />)}\r\n                        </form>\r\n                    </div>\r\n                })} */}\r\n                <h1>Edit Products</h1>\r\n                 <form action={\"http://localhost:3001//editProducts\"} method=\"POST\">\r\n                 <h3>Add/Edit Product</h3>\r\n                            <input placeholder={\"ProductID\"} name={\"ProductID\"} />\r\n                            <input placeholder={\"ProductName\"} name={\"ProductName\"} />\r\n                            <input placeholder={\"SupplierID\"} name={\"SupplierID\"} />\r\n                            <input placeholder={\"CategoryID\"} name={\"CategoryID\"} />\r\n                            <input placeholder={\"QuantityPerUnit\"} name={\"QuantityPerUnit\"} />\r\n                            <input placeholder={\"UnitsInStock\"} name={\"UnitsInStock\"} />\r\n                            <input placeholder={\"UnitsOnOrder\"} name={'UnitsOnOrder'} />\r\n                            <input placeholder={\"ReorderLevel\"} name={\"ReorderLevel\"} />\r\n                            <input placeholder={\"Discontinued\"} name={\"Discontinued\"} />\r\n                            <br/>\r\n                            <button>Send</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Edit;","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Menu from './Menu'\r\nimport Edit from './Edit'\r\nimport { BrowserRouter as Router, Route, Redirect,Link } from \"react-router-dom\";\r\n\r\n\r\nclass MainController extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {products:[]}\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {/* {this.props.tables.map(table => <Table table={table}></Table>)} */}\r\n                {/* <Table table=\"orders\"></Table> */}\r\n        <Router>\r\n\r\n          <div>\r\n\r\n            <Menu page={this.props.page} listOfPages={this.props.tables} appChangePage={this.props.appChangePage} ></Menu>\r\n        {this.props.tables.map((currTable) => <Route path={\"/\"+currTable} render={() => <Table table={currTable} isAuthed={true} />}/>) }   \r\n        {/* <Route path=\"/edit\" render={() => <Edit listOfPages={this.props.tables} isAuthed={true} />}/> */}\r\n     \r\n          </div>\r\n\r\n        </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainController;","import React, { Component } from 'react';\nimport MainController from './components/MainController'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainController tables={['Categories', 'customers', 'employees', 'orderdetails', 'orders', 'products', 'shippers', 'suppliers']}></MainController>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}